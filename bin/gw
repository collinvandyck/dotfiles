#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC1090
source ~/.dotfiles/bin/_utils
trap_kill_children

TEST_OPTS=(--info --console=plain)

bail() {
	echo "$@" >&2
	exit 1
}

gradle() {
	./gradlew "$@"
}

log-file() {
	local file; file=$(mktemp /tmp/gradle-XXXXXXX)
	mv "$file" "$file".log
	echo "$file".log
}

gradle-logged() {
	local file; file=$(log-file)
	GRADLE_LOG="$file"
	local status; status=$(mktemp)
	(
		set +e
		echo gradle "$@"
		echo "----"
		gradle "$@" 2>&1
		local ret=$?
		echo "$ret" > "$status"
		if [[ "$ret" != "0" ]]; then
			printf "\n💥 'gradle %s' exited with code: %s\n" "$*" "$ret"
		else
			printf "\n✅ 'gradle %s' completed successfully\n" "$*"
		fi
		set -e
	) > >(tee "$file")
	local ret; ret=$(cat "$status")
	if [[ "$ret" != "0" ]]; then
		# here something has failed. convert interrupted -> 130
		case "$ret" in
			"interrupted"|"130")
				return 130
				;;
			0)
				return 0
				;;
			*)
				return 1
				;;
		esac
	fi
}

run-tests() {
	local target; target=$1
	shift

	local names="$*"
	local args=()
	for arg in "$@"; do
		if [[ "$arg" == -* ]]; then
			args+=("$arg")
		else
			args+=("--tests" "$arg")
		fi
	done

	if gradle-logged "${target}" "${TEST_OPTS[@]}" "${args[@]}"; then
		notify "✅ Tests passed\n${names}"
	else
		[[ $? -eq 1 ]] && {
			notify "❌ Tests failed\n${names}"
			nvim +$ "$GRADLE_LOG"
		}
	fi
}

kill-bootrun() {
	pkill -f bootRun || true
	while nc -z localhost 8080 &>/dev/null; do sleep 0.25; done
}

web-bootrun() {
	gradle web:bootRun --info --console=plain | tspin
}

seed() {
	docker exec -i brain-backend-db-1 psql -v ON_ERROR_STOP=1 -U postgres -d slammo <scripts/seed/seed.sql;
}

reset-db() {
	make reset-db db
}

upsert-flags() {
	for flag in ${CORTEX_DEFAULT_FLAGS:-}; do
		sh ~/code/cortex-utils/enable-flag.sh "$flag"
	done
}

insert-fixtures() {
	for x in $(seq 1 5); do cortex-create-service "$(printf 'service-%03d\n' "$x")"; done
	for x in $(seq 1 5); do cortex-create-team "$(printf 'team-%03d\n' "$x")"; done
	for x in $(seq 1 5); do cortex-create-domain "$(printf 'domain-%03d\n' "$x")"; done
	get-catalog-pages &>/dev/null # force default catalog set

	create-relationship-type service-domains --create-catalog --src '["service", "domain"]' --dst '["service", "domain"]'
	create-relationship-type rt-norm --src '["domain","team","service"]' --dst '["service"]'
	create-relationship-type rt-cat --create-catalog --src '["domain","team","service"]' --dst '["service"]'

	# set up parent relationships
	set-entity-parent service-001 domain-001
	set-entity-parent service-002 domain-001
	set-entity-parent service-003 domain-002
	set-entity-parent domain-002 domain-001

	# set up service-domains relationships
	add-to-relationship-type --rel service-domains --src service-001 --dst domain-003
	add-to-relationship-type --rel service-domains --src service-002 --dst domain-002
	add-to-relationship-type --rel service-domains --src service-003 --dst service-001
}

create-api-key() {
	sh ~/code/cortex-utils/create-api-key.sh
}

spinner() {
	local title; title=$1; shift
	gum spin --show-error --spinner dot --title "$title" "$@"
}

gradle-tasks() {
	gradle tasks
}

gen-flags() {
	make generate-feature-flags
}

flags-dirty() {
	git-dirty -- feature-management
}

git-dirty() {
	git status --porcelain "$@"
}

gen() {
	spinner "Generating flags..." -- sh -c gen-flags
	if [ -n "$(flags-dirty)" ]; then
		echo "Unstaged flag state:"
		git diff -- feature-management
	fi
}

clean() {
	shift
	spinner "Cleaning..." -- sh -c gradle clean "$@"
}

fmt() {
	local s1; s1=$(git-dirty)
	spinner "Formatting..." -- sh -c 'gradle :spotlessApply --parallel --info --console=plain | tspin'
	local s2; s2=$(git-dirty)
	if [[ "$s1" != "$s2" ]]; then
		echo "🚧 working set changed" >&2
		return 1
	fi
}

bootstrap() {
	spinner "Killing existing processes..." -- sh -c kill-bootrun
	spinner "Resetting the db..." -- sh -c reset-db

	./gradlew web:bootRun --info --console=plain &>/tmp/gw-bootstrap.log &
	trap kill-bootrun EXIT INT TERM

	spinner "Waiting for API (logs: /tmp/gw-bootstrap.log)..." -- wait-port localhost 8080
	spinner "Seeding DB..." -- sh -c seed
	spinner "Upserting flags..." -- sh -c upsert-flags
	spinner "Creating API key..." -- sh -c create-api-key
	spinner "Inserting fixtures..." -- sh -c insert-fixtures

	spinner "Terminating app server..." -- sh -c kill-bootrun
	trap - EXIT INT TERM
	exec gw wr
}

start-testdb() {
	if ! nc -z localhost 5433 &>/dev/null; then
		spinner "Starting testdb" -- make testdb
	fi
}

start-db() {
	if ! nc -z localhost 5432 &>/dev/null; then
		spinner "Starting db" -- make db
	fi
}

# returns the root dir of the current project
project-root() {
	git rev-parse --show-toplevel
}

# deletes the project gradle caches, build dirs, etc.
nuke() {
	cd "$(project-root)"
	[ -f gradle.properties ] || bail "not in a gradle project"
	fd -H -I --type d '^.gradle$' | xargs rm -rf
	rm -rf web/build
}

# shellcheck disable=2163
for func in $(declare -F | awk '{print $3}'); do
	export -f "$func"
done

cmd=${1:-}
case $cmd in
	wt)
		shift
		run-tests web:test "$@"
		;;
	wit)
		shift
		start-testdb
		run-tests web:integrationTest "$@"
		;;
	qeit)
		shift
		run-tests query-engine:integrationTest "$@"
		;;
	wr)
		spinner "Killing bootrun..." -- sh -c kill-bootrun
		sh -c "
		while ! nc -z localhost 8080; do
			sleep 0.5
		done &> /tmp/gw-wait.log
		notify ✅ BE is ready
		" &
		gradle web:bootRun --info --console=plain 2>&1 | tee /tmp/gw-wr.log | tspin
		;;
	*)
		if declare -F "$cmd" &>/dev/null; then
			$cmd "$@"
		else
			gradle "$@"
		fi
		;;
esac

