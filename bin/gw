#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC1090
source ~/.dotfiles/bin/_utils
trap_kill_children

TEST_OPTS=(--info --console=plain)

gradle() {
	./gradlew "$@"
}

log-file() {
	local file; file=$(mktemp /tmp/gradle-XXXXXXX)
	mv "$file" "$file".log
	echo "$file".log
}

gradle-logged() {
	local file; file=$(log-file)
	local status; status=$(mktemp)
	(
		set +e
		echo gradle "$@"
		echo "----"
		gradle "$@" 2>&1
		local ret=$?
		echo "$ret" > "$status"
		if [[ "$ret" != "0" ]]; then
			printf "\n💥 'gradle %s' exited with code: %s\n" "$*" "$ret"
		else
			printf "\n✅ 'gradle %s' completed successfully\n" "$*"
		fi
		set -e
	) > >(tee "$file")
	local ret; ret=$(cat "$status")
	if [[ "$ret" != "0" ]]; then
		# here something has failed. only load logs if not interrupted
		if [[ "$ret" != "interrupted" ]] && [[ "$ret" != "130" ]]; then
			nvim +$ "$file"
		fi
	fi
}

run-tests() {
	local test_name; test_name=$1
	shift
	if [[ $# -gt 0 ]]; then
		gradle-logged "${test_name}" "${TEST_OPTS[@]}" --tests "$@"
	else
		gradle-logged "${test_name}" "${TEST_OPTS[@]}"
	fi
}

kill-bootrun() {
	pkill -f bootRun || true
	while nc -z localhost 8080 &>/dev/null; do sleep 0.25; done
}

web-bootrun() {
	gradle web:bootRun --info --console=plain | tspin
}

seed() {
	docker exec -i brain-backend-db-1 psql -v ON_ERROR_STOP=1 -U postgres -d slammo <scripts/seed/seed.sql;
}

reset-db() {
	make reset-db db
}

upsert-flags() {
	for flag in ${CORTEX_DEFAULT_FLAGS:-}; do
		sh ~/code/cortex-utils/enable-flag.sh "$flag"
	done
}

insert-fixtures() {
	for x in $(seq 1 25); do cortex-create-team "$(printf 'team-%03d\n' "$x")"; done
	for x in $(seq 1 25); do cortex-create-domain "$(printf 'domain-%03d\n' "$x")"; done
}

create-api-key() {
	sh ~/code/cortex-utils/create-api-key.sh
}

spinner() {
	local title; title=$1; shift
	gum spin --show-error --spinner dot --title "$title" "$@"
}

gradle-tasks() {
	gradle tasks
}

gen-flags() {
	make generate-feature-flags
}

flags-dirty() {
	git status --porcelain -- feature-management
}

gen() {
	spinner "Generating flags..." -- sh -c gen-flags
	if [ -n "$(flags-dirty)" ]; then
		echo "Unstaged flag state:"
		git diff -- feature-management
	fi
}

bootstrap() {
	spinner "Killing existing processes..." -- sh -c kill-bootrun
	spinner "Resetting the db..." -- sh -c reset-db

	./gradlew --no-daemon web:bootRun --info --console=plain &>/tmp/gw-bootstrap.log&
	trap kill-bootrun EXIT INT TERM

	spinner "Waiting for API (logs: /tmp/gw-bootstrap.log)..." -- wait-port 8080
	spinner "Seeding DB..." -- sh -c seed
	spinner "Upserting flags..." -- sh -c upsert-flags
	spinner "Creating API key..." -- sh -c create-api-key
	spinner "Inserting fixtures..." -- sh -c insert-fixtures

	spinner "Terminating app server..." -- sh -c kill-bootrun
	trap - EXIT INT TERM
	exec gw wr
}

# shellcheck disable=2163
for func in $(declare -F | awk '{print $3}'); do
	export -f "$func"
done

cmd=${1:-}
case $cmd in
	wt)
		shift
		run-tests web:test "$@"
		;;
	wit)
		shift
		run-tests web:integrationTest "$@"
		;;
	qeit)
		shift
		run-tests query-engine:integrationTest "$@"
		;;
	wr)
		spinner "Killing bootrun..." -- sh -c kill-bootrun
		sh -c "
		while ! nc -z localhost 8080; do
			sleep 0.5
		done &> /tmp/gw-wait.log
		notify BE is ready 👍
		" &
		gradle web:bootRun --info --console=plain 2>&1 | tee /tmp/gw-wr.log | tspin
		;;
	*)
		if declare -F "$cmd" &>/dev/null; then
			$cmd "$@"
		else
			gradle "$@"
		fi
		;;
esac

