#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC1090
source ~/.dotfiles/bin/_utils
trap_kill_children

TEST_OPTS=(--info --console=plain)

gradle() {
	./gradlew "$@"
}

log-file() {
	local file; file=$(mktemp /tmp/gradle-XXXXXXX)
	mv "$file" "$file".log
	echo "$file".log
}

gradle-logged() {
	local file; file=$(log-file)
	{
		echo gradle "$@"
		echo "----"
		gradle "$@" 2>&1
	} | tee "$file" || true
nvim "$file"
}

run-tests() {
	local test_name; test_name=$1
	shift
	if [[ $# -gt 0 ]]; then
		gradle-logged "${test_name}" "${TEST_OPTS[@]}" --tests "$@"
	else
		gradle-logged "${test_name}" "${TEST_OPTS[@]}"
	fi
}

kill-bootrun() {
	pkill -f bootRun || true
}

web-bootrun() {
	gradle web:bootRun --info --console=plain | tspin
}

seed() {
	docker exec -i brain-backend-db-1 psql -v ON_ERROR_STOP=1 -U postgres -d slammo <scripts/seed/seed.sql;
}

reset-db() {
	make reset-db db
}

upsert-flags() {
	for flag in ${CORTEX_DEFAULT_FLAGS:-}; do
		sh ~/code/cortex-utils/enable-flag.sh "$flag"
	done
}

create-api-key() {
	sh ~/code/cortex-utils/create-api-key.sh
}

spinner() {
	local title; title=$1; shift
	gum spin --spinner dot --title "$title" "$@"
}

gradle-tasks() {
	gradle tasks
}

new() {
	spinner "Killing existing processes..." -- sh -c kill-bootrun
	spinner "Resetting the db..." -- sh -c reset-db

	./gradlew --no-daemon web:bootRun --info --console=plain &>/dev/null &
	trap kill-bootrun EXIT INT TERM

	spinner "Waiting for API..." -- wait-port 8080
	spinner "Seeding DB..." -- sh -c seed
	spinner "Upserting flags..." -- sh -c upsert-flags
	spinner "Creating API key" -- sh -c create-api-key

	# kill bootrun and start the new one in this term
	trap - EXIT INT TERM
	kill-bootrun
	exec sh -c web-bootrun
}

# shellcheck disable=2163
for func in $(declare -F | awk '{print $3}'); do
	export -f "$func"
done

case ${1:-} in
	wt)
		shift
		run-tests web:test "$@"
		;;
	wit)
		shift
		run-tests web:integrationTest "$@"
		;;
	qeit)
		shift
		run-tests query-engine:integrationTest "$@"
		;;
	wr)
		sh -c "
		while ! nc -z localhost 8080; do
			sleep 0.5
		done &> /tmp/gw-wait.log
		notify BE is ready üëç
		" &
		gradle web:bootRun --info --console=plain | tspin
		;;
	new)
		new
		;;
	api-key)
		create-api-key
		;;
	*)
		gradle "$@"
		;;
esac

