#!/usr/bin/env bash

set -e # exit on failure
set -u # fail if vars are not defined

# add git via xcode cli tools
if ! command -v git &>/dev/null; then
	xcode-select --install
fi

# setup rosetta
if [[ `uname -m` != "arm64" ]] ; then
    echo "not arm64"
else
    if ! (arch -arch x86_64 uname -m > /dev/null) ; then
        echo "arm64: no Rosetta installed"
        softwareupdate --install-rosetta --agree-to-license
    fi
fi


# enable homebrew in path in case we just installed it.
export PATH=/opt/homebrew/bin:$PATH

# install homebrew
if [ ! $(command -v brew) ]; then
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# update homebrew packages
brew update --quiet

brew install --quiet --formula \
	fd \
	broot \
	btop \
	direnv \
	glow \
	gh \
	htop \
	jesseduffield/lazygit/lazygit \
	lazygit \
	lua \
	lua-language-server \
	luajit-openresty \
	mingw-w64 \
	pam-reattach \
	pstree \
	ripgrep \
	tailspin \
	tig \
	tree \
	tmux \
	zoxide \
	;

brew install --quiet --cask \
	1password \
	alacritty \
	caffeine \
	chatbox \
	cleanshot \
	discord \
	discord \
	docker \
	firefox \
	font-fantasque-sans-mono \
	font-fantasque-sans-mono-nerd-font \
	font-hack-nerd-font \
	google-chrome \
	imhex \
	kitty \
	logi-options-plus \
	microsoft-remote-desktop \
	ngrok \
	obsidian \
	raycast \
	signal \
	slack \
	steam \
	spotify \
	sublime-text \
	tailscale \
	utm \
	yubico-yubikey-manager \
	zoom \
	;

brew autoremove;

# install aws cli v2
if ! aws --version; then
	cd $(mktemp -d)
	curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
	sudo installer -pkg AWSCLIV2.pkg -target /
	cd ~
fi

# enable go in path in case we just installed it.
export PATH=/usr/local/go/bin:$PATH

# install go
if [[ $(go version 2>/dev/null | awk '{print $3}') != $DOTFILES_GO_VERSION ]]; then
	echo "Installing $DOTFILES_GO_FULL_VERSION"
	curl -s -L -o /tmp/golang.pkg https://go.dev/dl/${DOTFILES_GO_FULL_VERSION}.pkg
	sudo installer -pkg /tmp/golang.pkg -target /
	/usr/local/go/bin/go install golang.org/x/tools/gopls@latest
fi
curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${DOTFILES_GOLINT_VERSION}

# neovim
echo "Checking for neovim ${DOTFILES_NVIM_VERSION}"
nvim_version=$(nvim -v 2>/dev/null | head -1 | awk '{print $2}')
if [[ "$nvim_version" != ${DOTFILES_NVIM_VERSION} ]]; then
	echo "Installing neovim ${DOTFILES_NVIM_VERSION}"
	curl -s -L -o /tmp/nvim-macos.tar.gz https://github.com/neovim/neovim/releases/download/${DOTFILES_NVIM_VERSION}/nvim-macos.tar.gz
	echo "Unpacking neovim"
	xattr -c /tmp/nvim-macos.tar.gz
	rm -rf /tmp/nvim-macos
	tar xzf /tmp/nvim-macos.tar.gz -C /tmp
	sudo rm -rf /usr/local/nvim-macos
	sudo mv -f /tmp/nvim-macos /usr/local/nvim-macos
else
	echo "neovim ${DOTFILES_NVIM_VERSION} already installed: $nvim_version"
	echo "neovim is located at $(which nvim)"
fi
echo "Creating neovim links"
sudo ln -sf /usr/local/nvim-macos/bin/nvim  /usr/local/bin/nvim
sudo rm -rf /usr/local/bin/vim
sudo rm -rf /usr/local/bin/vi

# run generic os-agnostic installs
~/.dotfiles/install-common

# set darwin defaults
defaults write com.apple.Dock autohide-delay -float 0
defaults write -g NSWindowShouldDragOnGesture -bool true  
defaults write -g ApplePressAndHoldEnabled -bool false
defaults write -g KeyRepeat -int 2
defaults write com.apple.dock autohide-time-modifier -float 0.75
defaults write com.apple.dock appswitcher-all-displays -bool true # show cmd tab on all displays

# finally, install the launchd daemons
if [ "$DOTFILES_INSTALL_LAUNCHD" == "1" ]; then
	~/.dotfiles/install-launchd
fi


