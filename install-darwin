#!/usr/bin/env bash

set -e # exit on failure
set -u # fail if vars are not defined

# enable homebrew in path in case we just installed it.
export PATH=/opt/homebrew/bin:$PATH

# install homebrew
if [ ! $(command -v brew) ]; then
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# update homebrew packages
brew update --quiet

# taps
brew tap homebrew/cask-fonts
brew tap samwho/spacer

brew install --quiet --formula \
	asciinema \
	autoconf \
	automake \
	autossh \
	bandwhich \
	bash \
	bat \
	bottom \
	broot \
	btop \
	cmake \
	cowsay \
	curl \
	datasette \
	direnv \
	dust \
	dnsmasq \
	dua-cli \
	fd \
	fftw \
	fish \
	fswatch \
	fx \
	gcc \
	gh \
	git-delta \
	gource \
	graphviz \
	glow \
	gum \
	hexyl \
	htop \
	httpie \
	hugo \
	hyperfine \
	imagemagick \
	jpeg \
	jq \
	jesseduffield/lazygit/lazygit \
	lcov \
	libsodium \
	libtermkey \
	libtool \
	libvterm \
	lima \
	lnav \
	lua \
	lua-language-server \
	luajit-openresty \
	luv \
	make \
	maven \
	mingw-w64 \
	mitmproxy \
	mold \
	mosh \
	msgpack \
	mutagen-io/mutagen/mutagen \
	ninja \
	node \
	nvm \
	openssh \
	openssl@3 \
	pandoc \
	portaudio \
	protoc-gen-go \
	psgrep \
	pstree \
	pv \
	pyenv \
	pyenv-virtualenv \
	python@3.10 \
	qemu \
	ripgrep \
	shellcheck \
	sampler \
	spacer \
	speedtest-cli \
	spotify-tui \
	starship \
	sysdig \
	telnet \
	temporal \
	tig \
	tmux \
	tokei \
	tree \
	tree-sitter \
	typescript-language-server \
	ttyplot \
	wasmer \
	watch \
	wireguard-tools \
	xz \
	youtube-dl \
	yt-dlp \
	yq \
	zellij \
	zenith \
	zig \
	zsh-autosuggestions \
	;

brew install --quiet --cask \
	docker \
	font-fantasque-sans-mono \
	font-fantasque-sans-mono-nerd-font \
	geekbench \
	google-chrome \
	imhex \
	kitty \
	logseq \
	monitorcontrol \
	ngrok \
	raycast \
	session-manager-plugin \
	signal \
	slack \
	spotify \
	sublime-text \
	unnaturalscrollwheels \
	utm \
	yubico-yubikey-manager \
	;

brew remove --quiet -f \
	alt-tab \
	xquartz \
	;

# install aws cli v2
if ! aws --version; then
	cd $(mktemp -d)
	curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
	sudo installer -pkg AWSCLIV2.pkg -target /
	cd ~
fi

# enable go in path in case we just installed it.
export PATH=/usr/local/go/bin:$PATH

# install go
if [[ $(go version 2>/dev/null | awk '{print $3}') != $DOTFILES_GO_VERSION ]]; then
	echo "Installing $DOTFILES_GO_FULL_VERSION"
	curl -s -L -o /tmp/golang.pkg https://go.dev/dl/${DOTFILES_GO_FULL_VERSION}.pkg
	sudo installer -pkg /tmp/golang.pkg -target /
	/usr/local/go/bin/go install golang.org/x/tools/gopls@latest
fi
curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${DOTFILES_GOLINT_VERSION}

# neovim
if [[ $(nvim -v 2>/dev/null | head -1 | awk '{print $2}') != ${DOTFILES_NVIM_VERSION} ]]; then
	echo "Installing neovim ${DOTFILES_NVIM_VERSION}"
	curl -s -L -o /tmp/nvim-macos.tar.gz https://github.com/neovim/neovim/releases/download/${DOTFILES_NVIM_VERSION}/nvim-macos.tar.gz
	xattr -c /tmp/nvim-macos.tar.gz
	rm -rf /tmp/nvim-macos
	tar xzf /tmp/nvim-macos.tar.gz -C /tmp
	sudo rm -rf /usr/local/nvim-macos
	sudo mv -f /tmp/nvim-macos /usr/local/nvim-macos
else
	echo "neovim ${DOTFILES_NVIM_VERSION} already installed"
fi
sudo ln -sf /usr/local/nvim-macos/bin/nvim  /usr/local/bin/nvim
sudo rm -rf /usr/local/bin/vim
sudo rm -rf /usr/local/bin/vi
sudo cp ~/.dotfiles/bin/exec-nvim /usr/local/bin/vim
sudo cp ~/.dotfiles/bin/exec-nvim /usr/local/bin/vi

# run generic os-agnostic installs
~/.dotfiles/install-common

# flutter
flutter_ver=arm64_3.7.5-stable
flutter_loc=/usr/local/flutter
if [ ! -d $flutter_loc ]; then
	cd $(mktemp -d)
	curl -s -L -o flutter.zip https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_${flutter_ver}.zip
	unzip flutter.zip
	sudo mv flutter /usr/local/flutter
	cd ~
fi

# set darwin defaults
defaults write com.apple.Dock autohide-delay -float 0
defaults write -g NSWindowShouldDragOnGesture -bool true  
defaults write -g ApplePressAndHoldEnabled -bool false
defaults write -g KeyRepeat -int 2

# finally, install the launchd daemons
if [ "$DOTFILES_INSTALL_LAUNCHD" == "1" ]; then
	~/.dotfiles/install-launchd
fi


